// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`testing the example 1 should build the example code 1`] = `
"type Animal implements Node {
  id: ID
  createdAt: Date
  updatedAt: Date
  deletedAt: Date
  type: String!
  name: String
  tame: Boolean
  age: Int
}

input AnimalFilter {
  AND: [AnimalFilter!]
  OR: [AnimalFilter!]
  NOT: AnimalFilter
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  tame: Boolean
  tame_not: Boolean
  age: Int
  age_not: Int
  age_lt: Int
  age_gt: Int
}

input AnimalPage {
  limit: Int
  offset: Int
}

type Animals implements List {
  page: Page
  nodes: [Animal!]!
}

enum AnimalSortOrder {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  type_ASC
  type_DESC
  name_ASC
  name_DESC
  tame_ASC
  tame_DESC
  age_ASC
  age_DESC
}

input AnimalWhere {
  AND: [AnimalFilter!]
  OR: [AnimalFilter!]
  NOT: AnimalFilter
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  tame: Boolean
  tame_not: Boolean
  age: Int
  age_not: Int
  age_lt: Int
  age_gt: Int
}

input CreateAnimalData {
  id: ID
  createdAt: Date
  updatedAt: Date
  deletedAt: Date
  type: String!
  name: String
  tame: Boolean
  age: Int
}

\\"\\"\\"
A special custom Scalar type for Dates that converts to a ISO formatted string 
\\"\\"\\"
scalar Date

interface List {
  page: Page
  nodes: [Node!]!
}

type Mutation {
  createAnimal(data: CreateAnimalData!): Animal
  updateAnimal(data: UpdateAnimalData!, where: AnimalWhere!): [Animal!]!
  deleteAnimals(where: AnimalWhere!): [Animal!]!
}

interface Node {
  id: ID
  createdAt: Date
  updatedAt: Date
  deletedAt: Date
}

type Page {
  page: Int
  limit: Int
  offset: Int
}

type Query {
  getAnimal(where: AnimalWhere!, order: AnimalSortOrder): Animal
  getAnimals(order: AnimalSortOrder, page: AnimalPage, where: AnimalWhere!): Animals
}

type Subscription {
  onCreateAnimal: Animal!
  onUpdateAnimal: [Animal!]!
  onDeleteAnimals: [Animal!]!
}

input UpdateAnimalData {
  id: ID
  createdAt: Date
  updatedAt: Date
  deletedAt: Date
  type: String!
  name: String
  tame: Boolean
  age: Int
}
"
`;
