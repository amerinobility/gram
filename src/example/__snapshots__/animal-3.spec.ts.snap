// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`testing the example 3 should build the example code 1`] = `
"type Animal implements Node {
  name: String!
  mother: Animal
  father: Animal
  children: [Animal!]!
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input AnimalFilter {
  AND: [AnimalFilter!]
  OR: [AnimalFilter!]
  NOT: AnimalFilter
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  children_contains: AnimalWhere
  children_not_contains: AnimalWhere
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
}

input AnimalPage {
  limit: Int
  offset: Int
}

type Animals implements List {
  page: Page
  nodes: [Animal!]!
}

enum AnimalSortOrder {
  name_ASC
  name_DESC
  mother_ASC
  mother_DESC
  father_ASC
  father_DESC
  children_ASC
  children_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
}

input AnimalWhere {
  AND: [AnimalFilter!]
  OR: [AnimalFilter!]
  NOT: AnimalFilter
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  children_contains: AnimalWhere
  children_not_contains: AnimalWhere
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
}

input CreateAnimalData {
  name: String!
  mother: AnimalWhere
  father: AnimalWhere
  children: AnimalWhere!
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

scalar DateTime

interface List {
  page: Page
  nodes: [Node!]!
}

interface Node {
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type Page {
  page: Int
  limit: Int
  offset: Int
}

type Query {
  getAnimal(where: AnimalWhere!, order: AnimalSortOrder): Animal
  getAnimals(order: AnimalSortOrder, page: AnimalPage, where: AnimalWhere!): Animals
}

input UpdateAnimalData {
  name: String
  mother: AnimalWhere
  father: AnimalWhere
  children: AnimalWhere
  id: ID
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}
"
`;
