// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`example should add User to the Schema 1`] = `
"input CreateUserData {
  id: ID
  createdAt: Date
  updatedAt: Date
  deletedAt: Date
  name: String
  friends: UserWhere
}

\\"\\"\\"
A special custom Scalar type for Dates that converts to a ISO formatted string 
\\"\\"\\"
scalar Date

interface List {
  page: Page
  nodes: [Node!]!
}

type Mutation {
  createUser(data: CreateUserData!): User
  updateUser(data: UpdateUserData!, where: UserWhere!): [User!]!
  deleteUsers(where: UserWhere!): [User!]!
}

interface Node {
  id: ID
  createdAt: Date
  updatedAt: Date
  deletedAt: Date
}

type Page {
  page: Int
  limit: Int
  offset: Int
}

type Query {
  getUser(where: UserWhere!, order: UserSortOrder): User
  getUsers(order: UserSortOrder, page: UserPage, where: UserWhere!): Users
}

type Subscription {
  onCreateUser: User!
  onUpdateUser: [User!]!
  onDeleteUsers: [User!]!
}

input UpdateUserData {
  id: ID
  createdAt: Date
  updatedAt: Date
  deletedAt: Date
  name: String
  friends: UserWhere
}

type User implements Node {
  id: ID
  createdAt: Date
  updatedAt: Date
  deletedAt: Date
  name: String
  friends: [User!]!
}

input UserFilter {
  AND: [UserFilter!]
  OR: [UserFilter!]
  NOT: UserFilter
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
}

input UserPage {
  limit: Int
  offset: Int
}

type Users implements List {
  page: Page
  nodes: [User!]!
}

enum UserSortOrder {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  name_ASC
  name_DESC
  friends_ASC
  friends_DESC
}

input UserWhere {
  AND: [UserFilter!]
  OR: [UserFilter!]
  NOT: UserFilter
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
}
"
`;

exports[`example should add account to the model 1`] = `
"type Account implements Node {
  id: ID
  createdAt: Date
  updatedAt: Date
  deletedAt: Date
  name: String
  amount: Float
  user: User!
}

input AccountFilter {
  AND: [AccountFilter!]
  OR: [AccountFilter!]
  NOT: AccountFilter
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  amount: Float
  amount_not: Float
  amount_lt: Float
  amount_gt: Float
}

input AccountPage {
  limit: Int
  offset: Int
}

type Accounts implements List {
  page: Page
  nodes: [Account!]!
}

enum AccountSortOrder {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  name_ASC
  name_DESC
  amount_ASC
  amount_DESC
  user_ASC
  user_DESC
}

input AccountWhere {
  AND: [AccountFilter!]
  OR: [AccountFilter!]
  NOT: AccountFilter
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  amount: Float
  amount_not: Float
  amount_lt: Float
  amount_gt: Float
}

input CreateAccountData {
  id: ID
  createdAt: Date
  updatedAt: Date
  deletedAt: Date
  name: String
  amount: Float
  user: UserWhere!
}

input CreateUserData {
  id: ID
  createdAt: Date
  updatedAt: Date
  deletedAt: Date
  name: String
  friends: UserWhere
  accounts: AccountWhere
}

\\"\\"\\"
A special custom Scalar type for Dates that converts to a ISO formatted string 
\\"\\"\\"
scalar Date

interface List {
  page: Page
  nodes: [Node!]!
}

type Mutation {
  createUser(data: CreateUserData!): User
  updateUser(data: UpdateUserData!, where: UserWhere!): [User!]!
  deleteUsers(where: UserWhere!): [User!]!
  createAccount(data: CreateAccountData!): Account
  updateAccount(data: UpdateAccountData!, where: AccountWhere!): [Account!]!
  deleteAccounts(where: AccountWhere!): [Account!]!
}

interface Node {
  id: ID
  createdAt: Date
  updatedAt: Date
  deletedAt: Date
}

type Page {
  page: Int
  limit: Int
  offset: Int
}

type Query {
  getUser(where: UserWhere!, order: UserSortOrder): User
  getUsers(order: UserSortOrder, page: UserPage, where: UserWhere!): Users
  getAccount(where: AccountWhere!, order: AccountSortOrder): Account
  getAccounts(order: AccountSortOrder, page: AccountPage, where: AccountWhere!): Accounts
}

type Subscription {
  onCreateUser: User!
  onUpdateUser: [User!]!
  onDeleteUsers: [User!]!
  onCreateAccount: Account!
  onUpdateAccount: [Account!]!
  onDeleteAccounts: [Account!]!
}

input UpdateAccountData {
  id: ID
  createdAt: Date
  updatedAt: Date
  deletedAt: Date
  name: String
  amount: Float
  user: UserWhere
}

input UpdateUserData {
  id: ID
  createdAt: Date
  updatedAt: Date
  deletedAt: Date
  name: String
  friends: UserWhere
  accounts: AccountWhere
}

type User implements Node {
  id: ID
  createdAt: Date
  updatedAt: Date
  deletedAt: Date
  name: String
  friends: [User!]!
  accounts: [Account!]!
}

input UserFilter {
  AND: [UserFilter!]
  OR: [UserFilter!]
  NOT: UserFilter
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
}

input UserPage {
  limit: Int
  offset: Int
}

type Users implements List {
  page: Page
  nodes: [User!]!
}

enum UserSortOrder {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  name_ASC
  name_DESC
  friends_ASC
  friends_DESC
  accounts_ASC
  accounts_DESC
}

input UserWhere {
  AND: [UserFilter!]
  OR: [UserFilter!]
  NOT: UserFilter
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
}
"
`;

exports[`example should be able read from the schema 1`] = `
Object {
  "getUser": Object {
    "name": "test",
  },
}
`;

exports[`example should find multiple things 1`] = `
Object {
  "getUsers": Object {
    "nodes": Array [
      Object {
        "name": "test",
      },
      Object {
        "name": "New Test-User",
      },
    ],
  },
}
`;

exports[`schemaBuilder should render an empty Schema 1`] = `
"type Query
"
`;
